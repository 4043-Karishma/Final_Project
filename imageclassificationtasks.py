# -*- coding: utf-8 -*-
"""ImageClassificationTasks

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EAOZXZmf-FVLlAJaajdQK7Ad1XoDRjok
"""

!pip install streamlit
!pip install torchvision

import streamlit as st
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms

class CNNModel(nn.Module):
    def _init_(self, conv_layers=2, fc_layers=1, dropout_rate=0.5):
        super(CNNModel, self)._init_()
        layers = []
        in_channels = 3
        for _ in range(conv_layers):
            layers.append(nn.Conv2d(in_channels, 32, kernel_size=3, padding=1))
            layers.append(nn.ReLU())
            layers.append(nn.MaxPool2d(2))
            in_channels = 32
        self.conv = nn.Sequential(*layers)
        self.fc = nn.Linear(32 * 8 * 8, 10)
        self.dropout = nn.Dropout(dropout_rate)

    def forward(self, x):
        x = self.conv(x)
        x = x.view(x.size(0), -1)
        x = self.dropout(x)
        x = self.fc(x)
        return x

def get_data_loaders(batch_size=64):
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
    ])
    train_dataset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
    test_dataset = datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)
    train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
    test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, shuffle=False)
    return train_loader, test_loader

def train_and_evaluate(conv_layers, fc_layers, dropout_rate, epochs=5):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model = CNNModel(conv_layers=conv_layers, fc_layers=fc_layers, dropout_rate=dropout_rate).to(device)
    train_loader, test_loader = get_data_loaders()
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)

    # Training loop
    model.train()
    for epoch in range(epochs):
        for data, target in train_loader:
            data, target = data.to(device), target.to(device)
            optimizer.zero_grad()
            output = model(data)
            loss = criterion(output, target)
            loss.backward()
            optimizer.step()

    # Evaluation
    model.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            outputs = model(data)
            _, predicted = torch.max(outputs.data, 1)
            total += target.size(0)
            correct += (predicted == target).sum().item()
    accuracy = 100 * correct / total
    return accuracy

st.title("Neural Architecture Search for Image Classification")

conv_layers = st.slider("Number of Convolutional Layers", 1, 5, 2)
fc_layers = st.slider("Number of Fully Connected Layers", 1, 3, 1)
dropout_rate = st.slider("Dropout Rate", 0.0, 0.9, 0.5)

if st.button("Run NAS"):
    accuracy = train_and_evaluate(conv_layers, fc_layers, dropout_rate)
    st.write(f"Model Accuracy: {accuracy:.2f}%")