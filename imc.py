# -*- coding: utf-8 -*-
"""IMC

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RAmXnkKdqkJ97kg2e4sXEi3V02qY6Gq1
"""

# ===================== 🔧 Install Dependencies =====================
pip install torch torchvision optuna streamlit -q
pip install pyngrok -q

# ===================== 📦 Import Libraries =====================
import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision
import torchvision.transforms as transforms
import optuna
import streamlit as st
from pyngrok import ngrok
import copy
import time

# ===================== 📥 Load Dataset =====================
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))
])

train_set = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
test_set = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)

train_loader = torch.utils.data.DataLoader(train_set, batch_size=64, shuffle=True)
test_loader = torch.utils.data.DataLoader(test_set, batch_size=64, shuffle=False)

# ===================== 🧠 Define Searchable CNN =====================
class CNN(nn.Module):
    def __init__(self, trial):
        super(CNN, self).__init__()
        n_channels1 = trial.suggest_int("n_channels1", 16, 64)
        n_channels2 = trial.suggest_int("n_channels2", 32, 128)
        fc_units = trial.suggest_int("fc_units", 64, 256)

        self.conv1 = nn.Conv2d(3, n_channels1, kernel_size=3)
        self.conv2 = nn.Conv2d(n_channels1, n_channels2, kernel_size=3)
        self.pool = nn.MaxPool2d(2, 2)
        self.fc1 = nn.Linear(6*6*n_channels2, fc_units)
        self.fc2 = nn.Linear(fc_units, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(x.size(0), -1)
        x = F.relu(self.fc1(x))
        return self.fc2(x)

# ===================== 🧪 Define Objective Function =====================
def objective(trial):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model = CNN(trial).to(device)
    optimizer = torch.optim.Adam(model.parameters(), lr=trial.suggest_float("lr", 1e-4, 1e-2, log=True))
    criterion = nn.CrossEntropyLoss()

    for epoch in range(3):  # fast training
        model.train()
        for images, labels in train_loader:
            images, labels = images.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

    model.eval()
    correct, total = 0, 0
    with torch.no_grad():
        for images, labels in test_loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    accuracy = correct / total
    return 1.0 - accuracy

# ===================== 🔍 Run NAS Optimization =====================
study = optuna.create_study()
study.optimize(objective, n_trials=10)

best_params = study.best_params
print("✅ Best Hyperparameters:", best_params)

# ===================== 🏁 Final Model Training =====================
def train_final_model(best_params, num_epochs=10):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    class FinalCNN(nn.Module):
        def __init__(self):
            super(FinalCNN, self).__init__()
            self.conv1 = nn.Conv2d(3, best_params["n_channels1"], kernel_size=3)
            self.conv2 = nn.Conv2d(best_params["n_channels1"], best_params["n_channels2"], kernel_size=3)
            self.pool = nn.MaxPool2d(2, 2)
            self.fc1 = nn.Linear(6 * 6 * best_params["n_channels2"], best_params["fc_units"])
            self.fc2 = nn.Linear(best_params["fc_units"], 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = torch.flatten(x, 1)
            x = F.relu(self.fc1(x))
            return self.fc2(x)

    model = FinalCNN().to(device)
    optimizer = torch.optim.Adam(model.parameters(), lr=best_params["lr"])
    criterion = nn.CrossEntropyLoss()

    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    for epoch in range(num_epochs):
        model.train()
        correct, total = 0, 0
        for inputs, labels in train_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            _, predicted = outputs.max(1)
            total += labels.size(0)
            correct += predicted.eq(labels).sum().item()

        acc = correct / total
        print(f"Epoch {epoch+1}/{num_epochs} - Accuracy: {acc:.4f}")

        if acc > best_acc:
            best_acc = acc
            best_model_wts = copy.deepcopy(model.state_dict())

    model.load_state_dict(best_model_wts)
    torch.save(model.state_dict(), "final_cnn_model.pth")
    print(f"\n🎯 Final Accuracy: {best_acc:.4f}")
    return model, best_acc

final_model, final_accuracy = train_final_model(best_params)

# ===================== 🎨 Streamlit App Code =====================
with open("nas_py.py", "w") as f:
    f.write(f"""
import streamlit as st

st.set_page_config(page_title="NAS for Image Classification", layout="centered")

st.title("🔍 Neural Architecture Search for Image Classification")
st.write("This app demonstrates automated neural network design using PyTorch and Optuna.")

st.subheader("✨ Best Hyperparameters Found")
params = {best_params}
for key in params:
    st.write(f"**{{key}}**: {{params[key]}}")

st.subheader("📈 Final Trained Model")
st.success("✅ Final Model Accuracy: {final_accuracy:.4f}")

with open("final_cnn_model.pth", "rb") as f:
    st.download_button("Download Trained Model", f, file_name="final_cnn_model.pth")
""")

# ===================== 🚀 Launch Streamlit App =====================
public_url = ngrok.connect(port=8501)
print(f"Streamlit app running at: {public_url}")

!streamlit run nas_py.py &> /dev/null &